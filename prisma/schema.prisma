generator client {
  provider = "prisma-client-js"
}

datasource db {
  // provider = "postgresql"
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  funnels       Funnel[]
  teams         Team[]    @relation("TeamMembers")
  ownedTeams    Team[]    @relation("TeamOwner")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Team {
  id          String   @id @default(cuid())
  name        String
  ownerId     String
  owner       User     @relation("TeamOwner", fields: [ownerId], references: [id])
  members     User[]   @relation("TeamMembers")
  funnels     Funnel[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Funnel {
  id          String       @id @default(cuid())
  name        String
  description String
  slug        String
  published   Boolean      @default(false)
  userId      String
  teamId      String?
  user        User         @relation(fields: [userId], references: [id])
  team        Team?        @relation(fields: [teamId], references: [id])
  pages       Page[]
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  analytics   Analytics[]
  templates   Template[]
  abTests     AbTest[]
}

model Page {
  id        String     @id @default(cuid())
  name      String
  slug      String
  content   Json       @default("{\"elements\":[]}")
  order     Int        @default(0)
  funnelId  String
  funnel    Funnel     @relation(fields: [funnelId], references: [id], onDelete: Cascade)
  analytics Analytics[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  @@unique([funnelId, slug])
  @@index([funnelId, order])
}

model Template {
  id          String   @id @default(cuid())
  name        String
  description String
  thumbnail   String
  content     Json
  category    String
  funnelId    String?
  funnel      Funnel?  @relation(fields: [funnelId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Analytics {
  id        String   @id @default(cuid())
  pageId    String
  funnelId  String
  page      Page     @relation(fields: [pageId], references: [id])
  funnel    Funnel   @relation(fields: [funnelId], references: [id])
  views     Int      @default(0)
  converts  Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model AbTest {
  id          String   @id @default(cuid())
  name        String
  funnelId    String
  funnel      Funnel   @relation(fields: [funnelId], references: [id])
  variants    Json
  startDate   DateTime
  endDate     DateTime?
  status      String   @default("draft")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}